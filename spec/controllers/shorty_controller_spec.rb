RSpec.describe ShortyController, type: :request do
  let(:headers) do
    { 'Content-Type' => 'application/json' }
  end

  describe 'POST /shorten' do
    context 'shortens the valid URL' do
      context 'with autogenerated shortcode' do
        let(:params) do
          { url: 'https://example.com' }
        end

        before do
          post '/shorten', params, headers
        end

        it { expect(last_response.status).to eq 201 }
        it { expect(last_response.header['Content-Type']).to eq 'application/json' }
        it 'hee' do
          post '/shorten', params, headers
          p response
          expect_json(shortcode: :string)
        end
      end

      context 'with predefined shortcode' do
        let(:params) do
          { url: 'https://example.com', short_code: 'ExampleLink' }
        end

        before do
          post '/shorten', params, headers
        end

        it { expect(last_response.status).to eq 201 }
        it { expect(last_response.header['Content-Type']).to eq 'application/json' }
        it { expect_json(shortcode: 'ExampleLink') }
      end
    end

    context 'fails if URL is not set' do

    end

    context 'fails if URL is invalid' do

    end

    context 'fails if shortcode has invalid format' do

    end

    context 'fails if shortcode is already taken' do

    end
  end

  describe 'GET /:shortcode'

  describe 'GET /:shortcode/stats'
end
